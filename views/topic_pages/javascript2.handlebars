<nav class="navbar navbar-expand-md navbar-dark fixed-top bg-dark">
      <a class="navbar-brand" href="/homePage">CoursEdu</a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarCollapse" aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      
      <div class="collapse navbar-collapse " id="navbarCollapse">
        <ul class="navbar-nav ml-auto mr-auto">
          <li class="nav-item active">
            <a class="nav-link " href="/homePage">Home <span class="sr-only">(current)</span></a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/JavaScript">JavaScript</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/Python">Python</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/cPlus">C++</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/Java">Java</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/Discussion">Discussion</a>
          </li>
        </ul>
        
        <a class="nav-link" href="javascript:contact();">Contact</a>
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                User Information
            </button>
            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="dropdown-item" href="#">Profile</a>
                <a class="dropdown-item" href="#">Setting</a>
                <a class="dropdown-item" href="/logout">Logout</a>
            </div>
        </div>

      </div>
</nav>

<h1 class="cover-heading text-position-head">Basic Syntax</h1>

<div class="text-position-par1">
	<p class="lead">In JavaScript, variables, like in many other langauges are used to store data in memory. Since it is loosely typed, JavaScript does not require variables to be declared with an explicit type and as a result variables can be changed to store different types of data. Data in JavaScript can be divided into two general categories: primitive and non-primitive. Non-primitive data types are considered as objects (functions are also considered objects as well), while the five primitive data types in JavaScript are shown below.</p>
	
	<ul class="lead emphasize">
		<li>Boolean</li>
		<li>Number</li>
		<li>String</li>
		<li>Null</li>
		<li>Undefined</li>
	</ul>

	<p class="lead">Variables can be defined using three keywords: const, let, var. The "const" keyword is used for blocked-scope variables that cannot be overwritten, while the "let" keyword is used for blocked-scope variables that can be overwritten. The "var" keyword is used for non-blocked-scope variables that persist at the function or global level (depending on where they are declared). Thus, within a function, variables are accessible through control block statements such as conditional or iterative statements.</p>
	
	<img src="/public/css/pic7.png" alt="Issue displaying image!" class="pic7">
	
	<p class="lead">For the boolean type, variables can either be true or false. Variables with initial values of 0, -0, and the empty string (""), are all considered false. Refer to the statements above for the basic uses and syntax of different primitive types in JavaScript.</p>
	
  <form action="/javascript_1" method="Post" class="lead">
          <button type="submit" class="btn btn-lg btn-secondary button-position">Prev</button>
      </form>
  <form action="/javascript_3" method="POST" class="lead">
    <button type="submit" class="btn btn-lg btn-secondary button-position">Next</button>
  </form>
</div>